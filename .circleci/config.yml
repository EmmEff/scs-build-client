version: 2.1

orbs:
  codecov: codecov/codecov@3

parameters:
  cosign-version:
    type: string
    default: '2.4.0'

executors:
  node:
    docker:
      - image: node:22-slim
  golangci-lint:
    docker:
      - image: golangci/golangci-lint:v1.60
  golang-previous:
    docker:
      - image: golang:1.22
  golang-latest:
    docker:
      - image: golang:1.23

jobs:
  lint-markdown:
    executor: node
    steps:
      - checkout
      - run:
          name: Install markdownlint
          command: npm install -g markdownlint-cli
      - run:
          name: Check for Lint
          command: markdownlint .

  lint-source:
    executor: golangci-lint
    steps:
      - checkout
      - run:
          name: Check for Lint
          command: golangci-lint run

  check-go-mod:
    executor: golang-latest
    steps:
      - checkout
      - run:
          name: Go Mod Tidy
          command: go mod tidy
      - run:
          name: Check Module Tidiness
          command: git diff --exit-code -- go.mod go.sum

  build-source:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
      - checkout
      - run:
          name: Build Source
          command: go build ./...

  unit-test:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
      - checkout
      - run:
          name: Run Unit Tests
          command: go test -coverprofile cover.out -race ./...
      - codecov/upload:
          file: cover.out

  release-test:
    executor: golang-latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Docker
          command: curl -sL https://get.docker.com | bash
      - run:
          name: Install Cross-Platform Emulators
          command: docker run --privileged --rm tonistiigi/binfmt --install all
      - run:
          name: Install syft
          command: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Install cosign
          command: |
            COSIGN_VERSION="v<< pipeline.parameters.cosign-version >>"
            wget -q "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64"
            wget -q -O - "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign_checksums.txt" | grep -w cosign-linux-amd64 | sha256sum -c
      - run:
          name: Test Release
          command: curl -sfL https://goreleaser.com/static/run | DISTRIBUTION=oss bash -s -- release --snapshot --skip publish

  publish-release:
    executor: golang-latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Docker
          command: curl -sL https://get.docker.com | bash
      - run:
          name: Install Cross-Platform Emulators
          command: docker run --privileged --rm tonistiigi/binfmt --install all
      - run:
          name: Authenticate with DockerHub
          command: echo "${DOCKER_PASSWORD}" | docker login docker.io -u "${DOCKER_USERNAME}" --password-stdin
      - run:
          name: Install syft
          command: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Install cosign
          command: |
            COSIGN_VERSION="v<< pipeline.parameters.cosign-version >>"
            wget -q "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64"
            wget -q -O - "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign_checksums.txt" | grep -w cosign-linux-amd64 | sha256sum -c
            install cosign-linux-amd64 /usr/local/bin/cosign
            rm cosign-linux-amd64
      - run:
          name: Publish Release
          command: curl -sfL https://goreleaser.com/static/run | DISTRIBUTION=oss bash -s -- release
      - run:
          name: Attach attestations to image
          command: |
            TAG="`echo $CIRCLE_TAG | sed -e 's/^v//'`"
            for ARCH in amd64 arm64v8
            do
              IMAGE="sylabsio/scs-build:${TAG}-${ARCH}"
              syft scan -q -o cyclonedx-json=sbom.cdx.json "${IMAGE}"
              AWS_REGION=us-east-1 cosign attest --predicate sbom.cdx.json --type cyclonedx --key "awskms:///${COSIGN_KEY_ID}" "${IMAGE}"
            done

workflows:
  version: 2

  build-and-test:
    jobs:
      - lint-markdown
      - lint-source
      - check-go-mod
      - build-source:
          matrix:
            parameters:
              e: ["golang-previous", "golang-latest"]
      - unit-test:
          matrix:
            parameters:
              e: ["golang-previous", "golang-latest"]
      - release-test

  tagged-release:
    jobs:
      - publish-release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
          context:
            - dockerhub-release
            - github-release
            - cosign-release
